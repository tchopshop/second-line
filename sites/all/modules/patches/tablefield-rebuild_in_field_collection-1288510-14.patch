diff --git a/tablefield.module b/tablefield.module
index ce108c2..6dba179 100644
--- a/tablefield.module
+++ b/tablefield.module
@@ -396,10 +396,14 @@ function tablefield_field_widget_form(&$form, &$form_state, $field, $instance, $
   $element['#type'] = 'tablefield';
   $form['#attributes']['enctype'] = 'multipart/form-data';
 
+  $parents = isset($element['#field_parents']) ? $element['#field_parents'] : array();
+  $ajax_wrapper_id = drupal_clean_css_identifier('tablefield-' . implode('-', $parents) . '-' . $field['field_name'] . '-' . $delta . '-wrapper');
+  $rebuild_id = drupal_clean_css_identifier('tablefield-' . implode('-', $parents) . '-' . $field['field_name'] . '-' . $delta . '-rebuild');
+  
   // Establish a list of saved/submitted/default values
-  if (isset($form_state['clicked_button']['#value']) && $form_state['clicked_button']['#name'] == 'tablefield_rebuild_' . $field['field_name'] . '_' . $delta) {
+  if (isset($form_state['clicked_button']['#value']) && $form_state['clicked_button']['#name'] == $rebuild_id) {
     // Rebuilding table rows/cols
-    $default_value = tablefield_rationalize_table($form_state['tablefield_rebuild'][$field['field_name']][$langcode][$delta]['tablefield']);
+    $default_value = tablefield_rationalize_table($form_state['tablefield_rebuild']);
   }
   elseif (isset($form_state['clicked_button']['#value']) && $form_state['clicked_button']['#name'] == 'tablefield-import-button-' . $field['field_name'] . '-' . $delta) {
     // Importing CSV data
@@ -441,11 +445,11 @@ function tablefield_field_widget_form(&$form, &$form_state, $field, $instance, $
   $element['tablefield'] = array(
     '#title' => $element['#title'],
     '#description' => $help_text,
-    '#attributes' => array('id' => 'form-tablefield-' . $field['field_name'] . '-' . $delta, 'class' => array('form-tablefield')),
+    '#attributes' => array('id' => drupal_html_id('tablefield-' . implode('-', $parents) . '-' . $field['field_name'] . '-' . $delta), 'class' => array('form-tablefield')),
     '#type' => 'fieldset',
     '#tree' => TRUE,
     '#collapsible' => FALSE,
-    '#prefix' => '<div id="tablefield-' . $field['field_name'] . '-' . $delta . '-wrapper">',
+    '#prefix' => '<div id="' . $ajax_wrapper_id . '">',
     '#suffix' => '</div>',
   );
 
@@ -477,9 +481,9 @@ function tablefield_field_widget_form(&$form, &$form_state, $field, $instance, $
   }
 
   // Override the number of rows/columns if the user rebuilds the form.
-  if (isset($form_state['clicked_button']['#value']) && $form_state['clicked_button']['#name'] == 'tablefield_rebuild_' . $field['field_name'] . '_' . $delta) {
-    $count_cols = $form_state['tablefield_rebuild'][$field['field_name']][$langcode][$delta]['tablefield']['rebuild']['count_cols'];
-    $count_rows = $form_state['tablefield_rebuild'][$field['field_name']][$langcode][$delta]['tablefield']['rebuild']['count_rows'];
+  if (isset($form_state['clicked_button']['#value']) && $form_state['clicked_button']['#name'] == $rebuild_id) {
+    $count_cols = $form_state['tablefield_rebuild']['rebuild']['count_cols'];
+    $count_rows = $form_state['tablefield_rebuild']['rebuild']['count_rows'];
 
     drupal_set_message(t('Table structure rebuilt.'), 'status', FALSE);
   }
@@ -517,7 +521,7 @@ function tablefield_field_widget_form(&$form, &$form_state, $field, $instance, $
           '#maxlength' => 2048,
           '#size' => 0,
           '#attributes' => array(
-            'id' => 'tablefield_' . $delta . '_cell_' . $i . '_' . $ii,
+            'id' => drupal_html_id('tablefield-' . implode('-', $parents) . '-' . $field['field_name'] . '-' . $delta . '_cell_' . $i . '_' . $ii),
             'class' => array('tablefield-row-' . $i, 'tablefield-col-' . $ii),
             'style' => 'width:100%'
           ),
@@ -586,13 +590,13 @@ function tablefield_field_widget_form(&$form, &$form_state, $field, $instance, $
       '#executes_submit_callback' => TRUE,
       '#submit' => array('tablefield_rebuild_form'),
       '#value' => t('Rebuild Table'),
-      '#name' => 'tablefield_rebuild_' . $field['field_name'] . '_' . $delta,
+      '#name' => $rebuild_id,
       '#attributes' => array(
         'class' => array('tablefield-rebuild'),
       ),
       '#ajax' => array(
         'callback' => 'tablefield_rebuild_form_ajax',
-        'wrapper' => 'tablefield-' . $field['field_name'] . '-' . $delta . '-wrapper',
+        'wrapper' => $ajax_wrapper_id,
         'effect' => 'fade',
       ),
     );
@@ -626,7 +630,7 @@ function tablefield_field_widget_form(&$form, &$form_state, $field, $instance, $
     ),
     '#ajax' => array(
       'callback' => 'tablefield_rebuild_form_ajax',
-      'wrapper' => 'tablefield-' . $field['field_name'] . '-' . $delta . '-wrapper',
+      'wrapper' => $ajax_wrapper_id,
       'effect' => 'fade',
       'event' => 'click'
     ),
@@ -715,30 +719,10 @@ function tablefield_delete_table_values(&$tablefield) {
  * @param array $form_state
  */
 function tablefield_rebuild_form_ajax($form, $form_state) {
-  $rebuild = $form;
-  $parents = $form_state['clicked_button']['#parents'];
-
-  if ($form['#id'] == 'field-ui-field-edit-form') {
-    $rebuild = $form['instance']['default_value_widget'][$parents[0]];
-  }
-  else {
-    foreach ($parents as $parent) {
-      // Locate the delta of the field - 0 deltas need to break after
-      // descending to the 'rebuild' element, but deltas greater than
-      // 0 need to break /before/ adding the 'rebuild' element.
-      if (is_int($parent)) {
-        $delta = $parent;
-      }
-      $tmp = $rebuild;
-
-      if ($parent == 'rebuild' || $parent == 'import') {
-        $rebuild = $delta == 0 ? $tmp[$parent] : $tmp;
-        //$rebuild = $tmp[$parent];
-        break;
-      }
-      $rebuild = $tmp[$parent];
-    }
-  }
+  $parents = $form_state['triggering_element']['#array_parents'];
+  array_pop($parents);
+  array_pop($parents);
+  $rebuild = drupal_array_get_nested_value($form, $parents);
 
   // We don't want to re-send the format/_weight options.
   unset($rebuild['format']);
@@ -765,7 +749,10 @@ function tablefield_rebuild_form_ajax($form, $form_state) {
  */
 function tablefield_rebuild_form($form, &$form_state) {
   // Maintain the tablefield data.
-  $form_state['tablefield_rebuild'] = $form_state['input'];
+  $tablefield_value_parents = $form_state['triggering_element']['#parents'];
+  array_pop($tablefield_value_parents);
+  array_pop($tablefield_value_parents);
+  $form_state['tablefield_rebuild'] = drupal_array_get_nested_value($form_state['input'], $tablefield_value_parents);
   $form_state['rebuild'] = true;
 }
 