<?php
/**
 * @file
 * Main file for Collage Formatter module.
 */

/**
 * Implements hook_field_formatter_info().
 */
function collageformatter_field_formatter_info() {
  return array(
    'collageformatter' => array(
      'label' => t('Collage'),
      'field types' => array('image'),
      'settings' => _collageformatter_default_settings(),
      'description' => t('Display multi-value image fields as collage.'),
    ),
  );
}

/**
 * Default Collage Formatter settings.
 */
function _collageformatter_default_settings() {
  return array(
    'collage_number' => 1,
    'images_per_collage' => NULL,
    'images_to_skip' => 0,
    'collage_orientation' => 0,
    'collage_width' => 500,
    'collage_border_size' => 0,
    'collage_border_color' => '#ffffff',
    'gap_size' => 0,
    'gap_color' => '#ffffff',
    'border_size' => 0,
    'border_color' => '#000000',
    'image_link' => 'file',
    'image_link_image_style' => NULL,
    'image_link_modal' => NULL,
    'image_link_class' => NULL,
    'image_link_rel' => NULL,
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function collageformatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = _collageformatter_settings_form($settings);

  $element['image_link_image_style']['#states'] = array(
    'visible' => array(
      ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][image_link]"]' => array('value' => 'file'),
    )
  );
  $element['image_link_modal']['#states'] = array(
    'visible' => array(
      ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][image_link]"]' => array('value' => 'file'),
    ),
  );
  $element['image_link_class']['#states'] = array(
    'invisible' => array(
      ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][image_link]"]' => array('value' => ''),
    ),
  );
  $element['image_link_rel']['#states'] = array(
    'invisible' => array(
      ':input[name="fields[' . $field['field_name'] . '][settings_edit_form][settings][image_link]"]' => array('value' => ''),
    ),
  );

  // Field formatter in Views - doesn't work.
  if ($view_mode == '_custom') {
    $element['image_link_image_style']['#states'] = array(
      'visible' => array(
        ':input[name="options[settings][image_link]"]' => array('value' => 'file'),
      )
    );
    $element['image_link_modal']['#states'] = array(
      'visible' => array(
        ':input[name="options[settings][image_link]"]' => array('value' => 'file'),
      ),
    );
    $element['image_link_class']['#states'] = array(
      'invisible' => array(
        ':input[name="options[settings][image_link]"]' => array('value' => ''),
      ),
    );
    $element['image_link_rel']['#states'] = array(
      'invisible' => array(
        ':input[name="options[settings][image_link]"]' => array('value' => ''),
      ),
    );
  }

  return $element;
}

/**
 * Settings form for Collage Formatter.
 */
function _collageformatter_settings_form($settings) {
  $options_0_50 = drupal_map_assoc(range(0, 50));
  $options_1_50 = drupal_map_assoc(range(1, 50));

  $element['collage_number'] = array(
    '#type' => 'select',
    //'#title' => t('Number of collages'),
    '#options' => $options_1_50,
    '#default_value' => $settings['collage_number'],
    '#field_prefix' => t('Generate'),
    '#field_suffix' => t('collage(s)'),
    '#prefix' => '<div class="container-inline">',
  );
  $element['images_per_collage'] = array(
    '#type' => 'select',
    //'#title' => t('Images per collage'),
    '#options' => $options_1_50,
    '#default_value' => $settings['images_per_collage'],
    '#empty_option' => t('all'),
    '#field_prefix' => t('with'),
    '#field_suffix' => t('image(s) per collage') . ';',
  );
  $element['images_to_skip'] = array(
    '#type' => 'select',
    //'#title' => t('Images to skip'),
    '#options' => $options_0_50,
    '#default_value' => $settings['images_to_skip'],
    '#field_prefix' => t('Skip'),
    '#field_suffix' => t('image(s) from the start'),
    '#suffix' => '</div>',
  );

  $element['collage_orientation'] = array(
    '#type' => 'select',
    '#title' => t('Collage orientation'),
    '#description' => t('Select if it should be a wide collage (landscape) or a tall one (portrait).'),
    '#options' => array(
      '0' => t('Landscape'),
      '1' => t('Portrait'),
    ),
    '#default_value' => $settings['collage_orientation'],
  );
  $element['collage_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Collage width'),
    '#description' => t('Total collage width with all the borders and gaps.'),
    '#default_value' => $settings['collage_width'],
    '#element_validate' => array('element_validate_integer_positive'),
    '#size' => 4,
    '#maxlength' => 4,
    '#field_suffix' => 'px',
  );

  $element['collage_border_size'] = array(
    '#type' => 'select',
    '#title' => t('Collage border'),
    '#options' => $options_0_50,
    '#default_value' => $settings['collage_border_size'],
    '#field_suffix' => 'px',
    '#prefix' => '<div class="container-inline">',
  );
  $element['collage_border_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Collage border color'),
    '#default_value' => $settings['collage_border_color'],
    '#size' => 7,
    '#maxlength' => 7,
    '#suffix' => '<div class="collageformatter-color-picker"></div>' . '</div>',
    '#attached' => array(
      'library' => array(
        array('system', 'farbtastic'),
      ),
      'js' => array(
        drupal_get_path('module', 'collageformatter') . '/js/collageformatter.admin.js' => array(
          'type' => 'file',
        ),
      ),
    ),
  );

  $element['gap_size'] = $element['collage_border_size'];
  $element['gap_size']['#title'] = t('Image gap');
  $element['gap_size']['#default_value'] = $settings['gap_size'];
  $element['gap_color'] = $element['collage_border_color'];
  $element['gap_color']['#title'] = t('Image gap color');
  $element['gap_color']['#default_value'] = $settings['gap_color'];

  $element['border_size'] = $element['collage_border_size'];
  $element['border_size']['#title'] = t('Image border');
  $element['border_size']['#default_value'] = $settings['border_size'];
  $element['border_color'] = $element['collage_border_color'];
  $element['border_color']['#title'] = t('Image border color');
  $element['border_color']['#default_value'] = $settings['border_color'];

  $link_types = array(
    //'content' => t('Content'),
    'file' => t('File'),
  );
  $element['image_link'] = array(
    '#title' => t('Link image to'),
    '#type' => 'select',
    '#default_value' => $settings['image_link'],
    '#empty_option' => t('Nothing'),
    '#options' => $link_types,
    '#prefix' => '<div class="container-inline">',
  );

  $image_styles = image_style_options(FALSE);
  $element['image_link_image_style'] = array(
    '#title' => t('Target image style'),
    '#type' => 'select',
    '#default_value' => $settings['image_link_image_style'],
    '#empty_option' => t('None (original image)'),
    '#options' => $image_styles,
  );

  $modal_options = array();
  if (module_exists('colorbox')) {
    $modal_options['colorbox'] = t('Colorbox');
  }
  if (module_exists('shadowbox')) {
    $modal_options['shadowbox'] = t('Shadowbox');
  }
  if (module_exists('fancybox')) {
    $modal_options['fancybox'] = t('fancyBox');
  }
  if (module_exists('photobox')) {
    $modal_options['photobox'] = t('Photobox');
  }
  if (module_exists('lightbox2')) {
    $modal_options['lightbox2'] = t('Lightbox2');
  }
  $element['image_link_modal'] = array(
    '#title' => t('Modal gallery'),
    '#type' => 'select',
    '#default_value' => $settings['image_link_modal'],
    '#empty_option' => t('None'),
    '#options' => $modal_options,
    '#suffix' => '</div>',
  );

  $element['image_link_class'] = array(
    '#type' => 'textfield',
    '#title' => t('Image link class'),
    //'#description' => t('Custom class to add to all image links.'),
    '#default_value' => $settings['image_link_class'],
    '#size' => 30,
    '#prefix' => '<div class="container-inline">',
  );
  $element['image_link_rel'] = array(
    '#type' => 'textfield',
    '#title' => t('Image link rel'),
    //'#description' => t('Custom rel attribute to add to all image links.'),
    '#default_value' => $settings['image_link_rel'],
    '#size' => 30,
    '#suffix' => '</div>',
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function collageformatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  $summary[] = t('Generate') . ' <strong>' . $settings['collage_number'] . '</strong> ' . t('collage(s)') . ' '
             . t('with') . ' <strong>' . ($settings['images_per_collage'] ? $settings['images_per_collage'] : t('all')) . '</strong> ' . t('image(s) per collage') . '; '
             . t('Skip') . ' <strong>' . $settings['images_to_skip'] . '</strong> ' . t('image(s) from the start');
  $summary[] = t('Collage orientation') . ': ' . ($settings['collage_orientation'] ? t('Portrait') : t('Landscape'));
  $summary[] = t('Collage width') . ': ' . $settings['collage_width'];
  $summary[] = t('Collage border') . ': ' . $settings['collage_border_size'] . 'px <span style="background-color: ' . $settings['collage_border_color'] . ';">' . $settings['collage_border_color'] . '</span>';
  $summary[] = t('Image gap') . ': ' . $settings['gap_size'] . 'px <span style="background-color: ' . $settings['gap_color'] . ';">' . $settings['gap_color'] . '</span>';
  $summary[] = t('Image border') . ': ' . $settings['border_size'] . 'px <span style="background-color: ' . $settings['border_color'] . ';">' . $settings['border_color'] . '</span>';
  $link_types = array(
    'content' => t('Images linked to content'),
    'file' => t('Images linked to file'),
  );
  if (isset($link_types[$settings['image_link']])) {
    $summary[] = $link_types[$settings['image_link']];
    if ($settings['image_link'] == 'file') {
      if (empty($settings['image_link_image_style'])) {
        $summary[] = t('Target image style') . ': ' . t('None (original image)');
      }
      else {
        $image_styles = image_style_options(FALSE);
        $summary[] = t('Target image style') . ': ' . $image_styles[$settings['image_link_image_style']];
      }

      // Modal gallery summary.
      if (empty($settings['image_link_modal'])) {
        $summary[] = t('Modal gallery') . ': ' . t('None');
      }
      else {
        $summary[] = t('Modal gallery') . ': ' . $settings['image_link_modal'];
      }

      // Custom class/rel summary.
      $custom = array();
      if (!empty($settings['image_link_class'])) {
        $custom[] = 'class="' . check_plain($settings['image_link_class']) . '"';
      }
      if (!empty($settings['image_link_rel'])) {
        $custom[] = 'rel="' . check_plain($settings['image_link_rel']) . '"';
      }
      $summary[] = implode(' ', $custom);
    }
  }
  else {
    $summary[] = t('Images without links');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function collageformatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // If there are no images, don't do anything.
  if (empty($items)) {
    return '';
  }

  $settings = $display['settings'];
  $ids = entity_extract_ids($entity_type, $entity);
  $entity_id = $ids[0];
  $settings['gallery'] = 'collageformatter-' . $field['field_name'] . '-' . $entity_id;

  $collage = collageformatter_render_collage($items, $settings);
  return $collage;
}

/**
 * Returns renderable array of collages.
 */
function collageformatter_render_collage($images, $settings) {
  $collage = array();

  $render_settings = array(
    'border_size' => $settings['border_size'],
    'border_color' => $settings['border_color'],
    'gap_size' => $settings['gap_size'],
    'gap_color' => $settings['gap_color'],
    'image_link' => $settings['image_link'],
    'image_link_image_style' => $settings['image_link_image_style'],
    'image_link_modal' => $settings['image_link_modal'],
    'image_link_class' => $settings['image_link_class'],
    'image_link_rel' => $settings['image_link_rel'],
    'gallery' => $settings['gallery'],
  );

  if ($settings['images_to_skip']) {
    $images = array_slice($images, $settings['images_to_skip']);
  }
  foreach ($images as $delta => $image) {
    $images[$delta] = $image + array(
      'type' => 'image',
      'delta' => $delta,
      'total_width' => $image['width'] + 2 * $settings['border_size'] + $settings['gap_size'],
      'total_height' => $image['height'] + 2 * $settings['border_size'] + $settings['gap_size'],
    );
  }

  $collage_number = $settings['collage_number'];
  $images_per_collage = $settings['images_per_collage'] ? $settings['images_per_collage'] : round(count($images) / $collage_number);

  while ($collage_number > 0) {
    $collage_number--;
    // If last collage and all images option - take all images.
    if ($collage_number == 0 && !$settings['images_per_collage']) {
      $collage_images = $images;
    }
    // Take set number of images for this collage.
    else {
      $collage_images = array_slice($images, 0, $images_per_collage);
      // Update images array and set as the last collage if there are no more images.
      if (!$images = array_slice($images, $images_per_collage)) {
        $collage_number = 0;
      }
    }

    $box = _collageformatter_layout_box($collage_images, $settings['collage_orientation']);
    $box['parent_total_width'] = $settings['collage_width'] - 2 * $settings['collage_border_size'];
    $width = $box['parent_total_width'] - $settings['gap_size'];
    $box = _collageformatter_scale_box($box, array('width' => $width));

    $output = _collageformatter_render_box($box, $render_settings);
    $output .= theme('html_tag', array('element' => array(
      '#tag' => 'div',
      '#value' => '',
      '#attributes' => array(
        'class' => array(
          'collageformatter-collage-bottom',
        ),
        'style' => 'clear: both; margin-bottom: ' . 100 * ($settings['gap_size'] / $box['parent_total_width']) . '%',
      ),
    )));

    $collage_style = array();
    if ($settings['collage_border_size']) {
      $border = 'border: ' . $settings['collage_border_size'] . 'px solid';
      if ($settings['collage_border_color']) {
        $border .= ' ' . $settings['collage_border_color'];
      }
      $collage_style[] = $border . ';';
    }
    if ($settings['gap_color']) {
      $collage_style[] = 'background-color: ' . $settings['gap_color'] . ';';
    }
    $output = theme('html_tag', array('element' => array(
      '#tag' => 'div',
      '#value' => $output,
      '#attributes' => array(
        'class' => array(
          'collageformatter-collage',
        ),
        'style' => implode(' ', $collage_style),
      ),
    )));

    // Collage wrapper.
    $collage_wrapper_style = array(
      'max-width: ' . $settings['collage_width'] . 'px;',
    );
    $collage[] = array(
      '#theme' => 'html_tag',
      '#tag' => 'div',
      '#value' => $output,
      '#attributes' => array(
        'class' => array(
          'collageformatter-collage-wrapper',
        ),
        'style' => implode(' ', $collage_wrapper_style),
      ),
    );
  }

  return $collage;
}

/**
 * Recursive function to build the layout.
 * * @param $type
 *   boolean - TRUE for portrait (horizontal contact - vertical box type);
 *             FALSE for landscape (vertical contact - horizontal box type).
 */
function _collageformatter_layout_box($images, $type) {
  $box = array();
  $count = count($images);
  if ($count >= 2) {
    $size1 = floor($count / 2);
    $size2 = $count - $size1;
    $images1 = array_slice($images, 0, $size1);
    $images2 = array_slice($images, $size1, $size2);
    $box = array(
      'type' => 'box',
      'box_type' => $type ? 'vertical' : 'horizontal',
      'pixel_check' => FALSE,
    );
    $box[1] = _collageformatter_layout_box($images1, !$type);
    $box[2] = _collageformatter_layout_box($images2, !$type);
    $box[1]['parent_box_type'] = $box[2]['parent_box_type'] = $box['box_type'];
    $box[1]['pixel_check'] = FALSE;
    $box[2]['pixel_check'] = TRUE;
    
    if ($type) {
      // Horizontal contact; vertical box type.
      $dimensions = array('width' => $box[1]['total_width']);
    }
    else {
      // Vertical contact; horizontal box type.
      $dimensions = array('height' => $box[1]['total_height']);
    }
    $box[2] = _collageformatter_scale_box($box[2], $dimensions);

    if ($type) {
      // Horizontal contact; vertical box type.
      $box['total_height'] = $box[1]['total_height'] + $box[2]['total_height'];
      $box['total_width'] = $box[1]['total_width'];
    }
    else {
      // Vertical contact; horizontal box type.
      $box['total_width'] = $box[1]['total_width'] + $box[2]['total_width'];
      $box['total_height'] = $box[1]['total_height'];
    }

    $box[1]['parent_total_width'] = $box[2]['parent_total_width'] = $box['total_width'];
    $box[1]['parent_total_height'] = $box[2]['parent_total_height'] = $box['total_height'];
    $box[1]['siblings_total_width'] = $box[2]['total_width'];
    $box[1]['siblings_total_height'] = $box[2]['total_height'];
    $box[2]['siblings_total_width'] = $box[1]['total_width'];
    $box[2]['siblings_total_height'] = $box[1]['total_height'];
  }
  elseif ($count == 1) {
    $box = array_pop($images);
    $box['pixel_check'] = FALSE;
  }
  
  return $box;
}

/**
 * Recursive function to scale the box.
 */
function _collageformatter_scale_box($box, $dimensions) {
  // If it is an image - just resize it (change dimensions).
  if ($box['type'] == 'image') {
    if (array_key_exists('width', $dimensions)) {
      $box['total_height'] = ($dimensions['width'] / $box['total_width']) * $box['total_height'];
      $box['total_width'] = $dimensions['width'];
    }
    elseif (array_key_exists('height', $dimensions)) {
      $box['total_width'] = ($dimensions['height'] / $box['total_height']) * $box['total_width'];
      $box['total_height'] = $dimensions['height'];
    }
    return $box;
  }
  
  // If it is a box - then it should consist of two box elements;
  // Determine sizes of elements and resize them.
  if (array_key_exists('width', $dimensions)) {
    // Vertical box type; horizontal contact.
    if ($box['box_type'] == 'vertical') {
      $dimensions1 = $dimensions2 = $dimensions;
    }
    // Horizontal box type; vertical contact.
    elseif ($box['box_type'] == 'horizontal') {
      $dimensions1 = array('width' => ($box[1]['total_width'] / ($box[1]['total_width'] + $box[2]['total_width'])) * $dimensions['width']);
      $dimensions2 = array('width' => ($box[2]['total_width'] / ($box[1]['total_width'] + $box[2]['total_width'])) * $dimensions['width']);
    }
  }
  elseif (array_key_exists('height', $dimensions)) {
    // Vertical box type; horizontal contact.
    if ($box['box_type'] == 'vertical') {
      $dimensions1 = array('height' => ($box[1]['total_height'] / ($box[1]['total_height'] + $box[2]['total_height'])) * $dimensions['height']);
      $dimensions2 = array('height' => ($box[2]['total_height'] / ($box[1]['total_height'] + $box[2]['total_height'])) * $dimensions['height']);
    }
    // Horizontal box type; vertical contact.
    elseif ($box['box_type'] == 'horizontal') {
      $dimensions1 = $dimensions2 = $dimensions;
    }
  }
  $box[1] = _collageformatter_scale_box($box[1], $dimensions1);
  $box[2] = _collageformatter_scale_box($box[2], $dimensions2);

  if ($box['box_type'] == 'vertical') {
    $box['total_height'] = $box[1]['total_height'] + $box[2]['total_height'];
    $box['total_width'] = $box[1]['total_width'];
  }
  elseif ($box['box_type'] == 'horizontal') {
    $box['total_width'] = $box[1]['total_width'] + $box[2]['total_width'];
    $box['total_height'] = $box[1]['total_height'];
  }

  $box[1]['parent_total_width'] = $box[2]['parent_total_width'] = $box['total_width'];
  $box[1]['parent_total_height'] = $box[2]['parent_total_height'] = $box['total_height'];
  $box[1]['siblings_total_width'] = $box[2]['total_width'];
  $box[1]['siblings_total_height'] = $box[2]['total_height'];
  $box[2]['siblings_total_width'] = $box[1]['total_width'];
  $box[2]['siblings_total_height'] = $box[1]['total_height'];
  
  return $box;
}

/**
 * Recursive function to render the box.
 */
function _collageformatter_render_box($box, $render_settings) {
  $output = '';

  // Check if parent dimensions changed - and change yourself.
  if (array_key_exists('parent_box_type', $box)) {
    if ($box['parent_box_type'] == 'vertical') {
      $box['total_width'] = $box['parent_total_width'];
    }
    elseif ($box['parent_box_type'] == 'horizontal') {
      $box['total_height'] = $box['parent_total_height'];
    }
  }

  // Perform pixel check.
  if ($box['pixel_check']) {
    if ($box['parent_box_type'] == 'vertical') {
      $pixels = round($box['parent_total_height'] - 0.5) - round($box['total_height'] - 0.5) - round($box['siblings_total_height'] - 0.5);
      if ($pixels) {
        $box['total_height'] += $pixels;
      }
    }
    elseif ($box['parent_box_type'] == 'horizontal') {
      $pixels = round($box['parent_total_width'] - 0.5) - round($box['total_width'] - 0.5) - round($box['siblings_total_width'] - 0.5);
      if ($pixels) {
        $box['total_width'] += $pixels;
      }
    }
  }

  // Ensure that children have correct parent dimensions.
  if ($box['type'] == 'box') {
    $box[1]['parent_total_height'] = $box[2]['parent_total_height'] = $box['total_height'];
    $box[1]['parent_total_width'] = $box[2]['parent_total_width'] = $box['total_width'];
  }

  if ($box['type'] == 'image') {
    $image_width = round($box['total_width'] - 2 * $render_settings['border_size'] - $render_settings['gap_size'] - 0.5);
    $image_height = round($box['total_height'] - 2 * $render_settings['border_size'] - $render_settings['gap_size'] - 0.5);

    $filename = $image_width . 'x' . $image_height . '_collageformatter_' . drupal_basename($box['uri']);
    $directory = drupal_dirname(file_build_uri('collageformatter/' . file_uri_target($box['uri'])));
    $image_uri = $directory . '/' . $filename;
    if (!file_exists($image_uri)) {
      if (file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
        symlink(drupal_realpath($box['uri']), drupal_realpath($image_uri));
      }
    }

    $div_style = array(
      'float: left;',
      'max-width: ' . round($box['total_width'] - $render_settings['gap_size'] - 0.5) . 'px;',
      'width: ' . 100 * (round($box['total_width'] - $render_settings['gap_size'] - 0.5) / round($box['parent_total_width'] - 0.5)) . '%;',
    );
    if ($render_settings['gap_size']) {
      $div_style[] = 'margin-top: ' . 100 * ($render_settings['gap_size'] / $box['parent_total_width']) . '%;';
      $div_style[] = 'margin-left: ' . 100 * ($render_settings['gap_size'] / $box['parent_total_width']) . '%;';
    }

    $image_style = array(
      'display: block;',
      'max-width: 100%;',
      'height: auto;',
      'margin: 0;',
    );

    // TODO: use theme('image_formatter', ... ?
    $image = theme('image_style', array(
      'style_name' => 'collageformatter',
      'path' => $image_uri,
      'alt' => $box['alt'],
      'title' => $box['title'],
      'attributes' => array(
        'style' => implode(' ', $image_style),
      ),
    ));

    // Process image linking and modal gallery settings.
    if ($render_settings['image_link'] == 'file') {
      $class = $render_settings['image_link_class'] ? array($render_settings['image_link_class']) : array();
      $rel = $render_settings['image_link_rel'];
      switch ($render_settings['image_link_modal']) {
        case 'colorbox':
          $class[] = 'colorbox';
          $rel = 'colorbox-' . $render_settings['gallery'];
          break;
        case 'shadowbox':
          $rel = 'shadowbox[' . $render_settings['gallery'] . ']';
          break;
        case 'fancybox':
          $class[] = 'fancybox';
          break;
        case 'photobox':
          $class[] = 'photobox';
          photobox_initialize();
          break;
        case 'lightbox2':
          $rel = 'lightbox[' . $render_settings['gallery'] . ']';
          break;
        default:
      }
      $image = l($image,
        !empty($render_settings['image_link_image_style']) ? image_style_url($render_settings['image_link_image_style'], $box['uri']) : file_create_url($box['uri']),
        array(
          'attributes' => array(
            'title' => $box['title'],
            'class' => $class,
            'rel' => $rel,
          ) + ($render_settings['image_link_modal'] == 'fancybox' ? array('data-fancybox-group' => 'fancybox-' . $render_settings['gallery']) : array()),
          'html' => TRUE,
        )
      );
    }

    $border = '';
    if ($render_settings['border_size']) {
      $border = 'border: ' . $render_settings['border_size'] . 'px solid';
      if ($render_settings['border_color']) {
        $border .= ' ' . $render_settings['border_color'];
      }
      $border .= ';';
    }
    $image = theme('html_tag', array('element' => array(
      '#tag' => 'div',
      '#value' => $image,
      '#attributes' => array(
        'style' => $border,
      ),
    )));

    $output .= theme('html_tag', array('element' => array(
      '#tag' => 'div',
      '#value' => $image,
      '#attributes' => array(
        'style' => implode(' ', $div_style),
      ),
    )));
  }
  elseif ($box['type'] == 'box') {
    $div_style = array(
      'float: left;',
      'max-width: ' . round($box['total_width'] - 0.5) . 'px;',
    );
    if (isset($box['parent_total_width'])) {
      $div_style[] = 'width: ' . 100 * (round($box['total_width'] - 0.5) / $box['parent_total_width']) . '%;';
    }
    $value = _collageformatter_render_box($box[1], $render_settings) . _collageformatter_render_box($box[2], $render_settings);
    $output .= theme('html_tag', array('element' => array(
      '#tag' => 'div',
      '#value' => $value,
      '#attributes' => array(
        'style' => implode(' ', $div_style),
      ),
    )));
  }

  return $output;
}

/**
 * Implements hook_image_default_styles().
 */
function collageformatter_image_default_styles() {
  $styles = array();

  $styles['collageformatter'] = array(
    'effects' => array(
      array(
        'name' => 'collageformatter',
        'weight' => '0',
      ),
    ),
  );

  return $styles;
}

/**
 * Implements hook_image_effect_info().
 */
function collageformatter_image_effect_info() {
  $effects = array();

  $effects['collageformatter'] = array(
    'label' => t('Collage Formatter'),
    'effect callback' => 'collageformatter_image_effect_callback',
    'dimensions passthrough' => TRUE,
  );

  return $effects;
}

/**
 * Collage Formatter image effect.
 */
function collageformatter_image_effect_callback(&$image, $data) {
  if (strstr(drupal_basename($image->source), '_collageformatter_')) {
    $dimensions = preg_replace('/.+\/([\d]+x[\d]+)_collageformatter_.+/', '$1', $image->source);
    list($image_width, $image_height) = explode('x', $dimensions);

    if (isset($image_width) && isset($image_height)) {
      return image_effect_apply($image, array(
        'effect callback' => 'image_scale_and_crop_effect',
        'data' => array(
          'width' => $image_width,
          'height' => $image_height,
        ),
      ));
    }
  }
  return FALSE;
}

/**
 * Flushes collageformatter style images.
 */
function collageformatter_flush_style() {
  $style = image_style_load('collageformatter');
  image_style_flush($style);
  drupal_set_message(t('Style %style has been flushed.', array('%style' => 'collageformatter')));
}

/**
 * Implements hook_views_api().
 */
function collageformatter_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function collageformatter_form_field_ui_display_overview_form_alter(&$form, &$form_state) {
  if (!empty($form_state['formatter_settings_edit'])) {
    foreach ($form_state['values']['fields'] as $field => $value) {
      if ($value['type'] == 'collageformatter') {
        $form['fields'][$field]['format']['settings_edit_form']['actions']['flush'] = array(
          '#type' => 'submit',
          '#value' => t('Flush generated images'),
          '#submit' => array('collageformatter_flush_style'),
        );
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function collageformatter_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['collageformatter'])) {
    $group = $implementations['collageformatter'];
    unset($implementations['collageformatter']);
    $implementations['collageformatter'] = $group;
  }
}
