<?php

function panels_css_js_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'ctools_plugins/' . $plugin;
  }
}

function panels_css_js_page_manager_variant_operations_alter(&$ops, $handler) {
  reset($ops['children']);

  $children_operations = array();

  while (list($key, $value) = each($ops['children'])) {
    $children_operations[$key] = $value;

    if ($key == 'context') {
      $children_operations['css_js'] = array(
        'title' => t('CSS & JS'),
        'description' => t('Inject CSS & JS files and code into a page.'),
        'form' => 'panels_css_js_form',
      );
    }
  }

  $ops['children'] = $children_operations;
}

function panels_css_js_form($form, &$form_state) {
  $conf = &$form_state['handler']->conf;

  panels_css_js_files_css_form($form, $conf);
  panels_css_js_files_js_form($form, $conf);
  panels_css_js_code_css_form($form, $conf);
  panels_css_js_code_js_form($form, $conf);

  return $form;
}

function panels_css_js_files_css_form(&$form, &$conf) {
  if (empty($conf['panels_css_js_files_css'])) {
    $conf['panels_css_js_files_css'] = '';
  }

  panels_css_js_files_css_edit_form($form, $conf);
}

function panels_css_js_files_js_form(&$form, &$conf) {
  if (empty($conf['panels_css_js_files_js'])) {
    $conf['panels_css_js_files_js'] = '';
  }

  panels_css_js_files_js_edit_form($form, $conf);
}

function panels_css_js_code_css_form(&$form, &$conf) {
  if (empty($conf['panels_css_js_code_css'])) {
    $conf['panels_css_js_code_css'] = '';
  }

  panels_css_js_code_css_edit_form($form, $conf);
}

function panels_css_js_code_js_form(&$form, &$conf) {
  if (empty($conf['panels_css_js_code_js'])) {
    $conf['panels_css_js_code_js'] = '';
  }

  if (empty($conf['panels_css_js_code_js_wrapper'])) {
    $conf['panels_css_js_code_js_wrapper'] = 0;
  }

  panels_css_js_code_js_edit_form($form, $conf);
}

function panels_css_js_get_files_field_description() {
  return t('Enter one file per line. You can use "[module-{module_name}]" or "[theme-{theme_name}]" placeholders to get path to module/theme. You can use "[theme]" placeholder to get path to current page theme.');
}

function panels_css_js_get_code_styles() {
  return 'font:bold 12px monospace;color:#0000E6;';
}

function panels_css_js_files_css_edit_form(&$form, &$conf) {
  $form['settings']['panels_css_js_files_css'] = array(
    '#type' => 'textarea',
    '#title' => t('CSS files'),
    '#description' => panels_css_js_get_files_field_description() . ' ' . t('Examples: "[theme]/css/styles.css" or "[theme-zen]/styles/main.css"'),
    '#default_value' => $conf['panels_css_js_files_css'],
  );
}

function panels_css_js_files_js_edit_form(&$form, &$conf) {
  $form['settings']['panels_css_js_files_js'] = array(
    '#type' => 'textarea',
    '#title' => t('JS files'),
    '#description' => panels_css_js_get_files_field_description() . ' ' . t('Examples: "[theme]/js/scripts.js" or "[theme-zen]/scripts/main.js"'),
    '#default_value' => $conf['panels_css_js_files_js'],
  );
}

function panels_css_js_code_css_edit_form(&$form, &$conf) {
  $form['settings']['panels_css_js_code_css'] = array(
    '#type' => 'textarea',
    '#title' => t('CSS code'),
    '#default_value' => $conf['panels_css_js_code_css'],
    '#rows' => '30',
    '#attributes' => array('style' => panels_css_js_get_code_styles()),
  );
}

function panels_css_js_code_js_edit_form(&$form, &$conf) {
  $form['settings']['panels_css_js_code_js_title'] = array(
    '#markup' => '<label>' . t('JS code') . '</label>',
  );

  $form['settings']['panels_css_js_code_js_wrapper'] = array(
    '#type' => 'radios',
    '#options' => array(
        0 => t('Do not use wrapper'),
        1 => t('Use jQuery wrapper'),
        2 => t('Use jQuery wrapper with document.ready handler')
    ),
    '#default_value' => $conf['panels_css_js_code_js_wrapper'],
    '#required' => true,
  );

  $form['settings']['panels_css_js_code_js'] = array(
    '#type' => 'textarea',
    '#default_value' => $conf['panels_css_js_code_js'],
    '#rows' => '30',
    '#attributes' => array('style' => panels_css_js_get_code_styles()),
  );
}

function panels_css_js_form_submit($form, &$form_state) {
  $conf = &$form_state['handler']->conf;

  panels_css_js_files_css_edit_form_submit($form_state, $conf);
  panels_css_js_files_js_edit_form_submit($form_state, $conf);
  panels_css_js_code_css_edit_form_submit($form_state, $conf);
  panels_css_js_code_js_edit_form_submit($form_state, $conf);
}

function panels_css_js_files_css_edit_form_submit(&$form_state, &$conf) {
  $values = $form_state['values'];
  $conf['panels_css_js_files_css'] = $values['panels_css_js_files_css'];
}

function panels_css_js_files_js_edit_form_submit(&$form_state, &$conf) {
  $values = $form_state['values'];
  $conf['panels_css_js_files_js'] = $values['panels_css_js_files_js'];
}

function panels_css_js_code_css_edit_form_submit(&$form_state, &$conf) {
  $values = $form_state['values'];
  $conf['panels_css_js_code_css'] = $values['panels_css_js_code_css'];
}

function panels_css_js_code_js_edit_form_submit(&$form_state, &$conf) {
  $values = $form_state['values'];

  $conf['panels_css_js_code_js'] = $values['panels_css_js_code_js'];
  $conf['panels_css_js_code_js_wrapper'] = $values['panels_css_js_code_js_wrapper'];
}

function panels_css_js_ctools_render_alter($info, $page, $context) {
  $conf = $context['handler']->conf;

  if (isset($conf['panels_css_js_files_css']) && $conf['panels_css_js_files_css']) {
    panels_css_js_files_css_render($conf);
  }

  if (isset($conf['panels_css_js_files_js']) && $conf['panels_css_js_files_js']) {
    panels_css_js_files_js_render($conf);
  }

  if (isset($conf['panels_css_js_code_css']) && $conf['panels_css_js_code_css']) {
    panels_css_js_code_css_render($conf);
  }

  if (isset($conf['panels_css_js_code_js']) && $conf['panels_css_js_code_js']) {
    panels_css_js_code_js_render($conf);
  }
}

function panels_css_js_files_css_render($conf) {
  $css_conf = $conf['panels_css_js_files_css'];
  $css_files = panels_css_js_files_filter_value($css_conf);

  foreach ($css_files as $css_file) {
    drupal_add_css($css_file);
  }
}

function panels_css_js_files_js_render($conf) {
  $js_conf = $conf['panels_css_js_files_js'];
  $js_files = panels_css_js_files_filter_value($js_conf);

  foreach ($js_files as $js_file) {
    drupal_add_js($js_file);
  }
}

function panels_css_js_code_css_render($conf) {
  $css_conf = $conf['panels_css_js_code_css'];

  $css_code = $css_conf;
  drupal_add_css($css_code, 'inline');
}

function panels_css_js_code_js_render($conf) {
  $js_conf = $conf['panels_css_js_code_js'];
  $js_wrapper_conf = $conf['panels_css_js_code_js_wrapper'];

  $js_code = $js_conf;

  if ($js_wrapper_conf == 1) {
    $js_code = '(function($){' . $js_code . '})(jQuery);';
  }

  if ($js_wrapper_conf == 2) {
    $js_code = '(function($){$("document").ready(function(){' . $js_code . '});})(jQuery);';
  }

  drupal_add_js($js_code, 'inline');
}

function panels_css_js_files_filter_value($value) {
  $include_files = array();

  if ($value) {
    $files = array_filter(array_map('trim', explode(PHP_EOL, $value)), 'drupal_strlen');

    foreach ($files as $file) {
      $theme_path = dirname($GLOBALS['theme_info']->filename);
      $file = str_replace('[theme]', $theme_path, $file);

      $matches = array();
      $types = array('module', 'theme');

      foreach ($types as $type) {
        $pattern = '/\[' . $type . '-(.+)\]/';

        preg_match($pattern, $file, $matches);

        if (count($matches) > 1 && ($path = drupal_get_path($type, $matches[1])) != '') {
          $file = str_replace($matches[0], $path, $file);
        }
      }

      $include_files[] = $file;
    }
  }

  return $include_files;
}
